diff --git a/types.d.ts b/types.d.ts
index 498bb694de2e6a62f14d3fe998dc538aff920fc6..d3669b3bb313e4f796a45a7eafa3b3800ba9e312 100644
--- a/types.d.ts
+++ b/types.d.ts
@@ -1,11 +1,12 @@
 // Internal helper types
+import React from "react";
 
 /**
- * This is the global JSX.ElementType if it’s defined, otherwise never.
+ * This is the global React.JSX.ElementType if it’s defined, otherwise never.
  */
-// @ts-ignore JSX runtimes may optionally define JSX.ElementType. The MDX types need to work regardless whether this is
+// @ts-ignore JSX runtimes may optionally define React.JSX.ElementType. The MDX types need to work regardless whether this is
 // defined or not.
-type ElementType = any extends JSX.ElementType ? never : JSX.ElementType;
+type ElementType = any extends React.JSX.ElementType ? never : React.JSX.ElementType;
 
 /**
  * This matches any function component types that ar part of `ElementType`.
@@ -20,35 +21,35 @@ type ClassElementType = Extract<ElementType, new(props: Record<string, any>) =>
 /**
  * A valid JSX string component.
  */
-type StringComponent = Extract<keyof JSX.IntrinsicElements, ElementType extends never ? string : ElementType>;
+type StringComponent = Extract<keyof React.JSX.IntrinsicElements, ElementType extends never ? string : ElementType>;
 
 /**
  * A JSX element returned by MDX content.
  */
-export type Element = JSX.Element;
+export type Element = React.JSX.Element;
 
 /**
  * A valid JSX function component.
  */
 type FunctionComponent<Props> = ElementType extends never
-    // If JSX.ElementType isn’t defined, the valid return type is JSX.Element
+    // If React.JSX.ElementType isn’t defined, the valid return type is React.JSX.Element
     ? (props: Props) => Element | null
     : FunctionElementType extends never
-    // If JSX.ElementType is defined, but doesn’t allow function components, function components are disallowed.
+    // If React.JSX.ElementType is defined, but doesn’t allow function components, function components are disallowed.
         ? never
-    // If JSX.ElementType allows function components, its return value determines what is a valid.
+    // If React.JSX.ElementType allows function components, its return value determines what is a valid.
     : (props: Props) => ReturnType<FunctionElementType>;
 
 /**
  * A valid JSX class component.
  */
 type ClassComponent<Props> = ElementType extends never
-    // If JSX.ElementType isn’t defined, the valid return type is a constructor that returns JSX.ElementClass
-    ? new(props: Props) => JSX.ElementClass
+    // If React.JSX.ElementType isn’t defined, the valid return type is a constructor that returns React.JSX.ElementClass
+    ? new(props: Props) => React.JSX.ElementClass
     : ClassElementType extends never
-    // If JSX.ElementType is defined, but doesn’t allow constructors, function components are disallowed.
+    // If React.JSX.ElementType is defined, but doesn’t allow constructors, function components are disallowed.
         ? never
-    // If JSX.ElementType allows class components, its return value determines what is a valid.
+    // If React.JSX.ElementType allows class components, its return value determines what is a valid.
     : new(props: Props) => InstanceType<ClassElementType>;
 
 /**
@@ -70,7 +71,7 @@ interface NestedMDXComponents {
 export type MDXComponents =
     & NestedMDXComponents
     & {
-        [Key in StringComponent]?: Component<JSX.IntrinsicElements[Key]>;
+        [Key in StringComponent]?: Component<React.JSX.IntrinsicElements[Key]>;
     }
     & {
         /**
